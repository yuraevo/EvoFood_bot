const DB = require("../connect_db");
const Client  = require('pg');
const registration = require("./userRegistration");
const keyboard_text = require("../keyboard_text");
const keyboards = require("../keyboard");
const text = require("../text");
const now = new Date();

async function give_feedback(bot, id, first_name, username)
{
    try {
        database = new Client.Pool(DB);
        let array = new Array(); 
        let uniqueItems = new Array(); //–æ—Ç–∑—ã–≤
        let array2 = new Array(); 
        let uniqueItems2 = new Array(); // –æ—Ü–µ–Ω–∫–∞

        var SELECT_CLIENT_QUERY = `SELECT "Client".id 
                                FROM "Client" JOIN "User" ON "User".id = "Client".user
                                WHERE "User".username = ($1)`;  //–ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
        var INSERT_INTO_REVIEWS_QUERY = `INSERT INTO "Reviews"(client, review, date_of_review, assessment) 
                                    VALUES (($1), ($2), ($3), ($4))`;

        async function inputFeedback() {
            try {
               return await new Promise(async function(resolve) {
                   await bot.sendDocument(id, "img/ot.gif", {
                       parse_mode: "HTML",
                       caption: `<strong>üíå ${first_name}, –Ω–∞–¥–µ–µ–º—Å—è –º—ã –í–∞–º –Ω—Ä–∞–≤–∏–º—Å—è! \n\nüíô–ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –º—ã –±—É–¥–µ–º –≤—Å–µ –¥–µ–ª–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ! \n\n–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤: </strong>`
                   });
                   await bot.on("message", msg => {
                            if(uniqueItems.length < 1) {
                                feedback = msg.text;
                                array.push(feedback);
                                uniqueItems = Array.from(new Set(array));
                                console.log("–í–≤–æ–¥–∏—Ç –æ—Ç–∑—ã–≤: " + uniqueItems);
                            }
                            resolve();
                    });
                });
            }
            catch(ex) {
                console.log('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ - ' + ex);
            }
            finally { 
               
            }
        }

        async function inputAssessment() {
            try {
               return await new Promise(async function(resolve) {
                   await bot.sendMessage(id, `${first_name}, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –æ—Ç 1 –¥–æ 10:`, {});
                   await bot.on("message", msg => {
                            if(uniqueItems2.length < 1) {
                                assessment = msg.text;
                                array2.push(assessment);
                                uniqueItems2 = Array.from(new Set(array2));
                                console.log("–í–≤–æ–¥–∏—Ç –æ—Ü–µ–Ω–∫—É: " + uniqueItems2);
                            }
                            resolve();
                    });
                });
            }
            catch(ex) {
                console.log('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ - ' + ex);
            }
            finally { 
               
            }
        }

        await inputFeedback();
        await inputAssessment();
        SELECT_CLIENT = await database.query(SELECT_CLIENT_QUERY, [username]); // –≤–∑—è—Ç–∏–µ –∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞
        console.log("–í—ã–≤–æ–¥ –æ—Ç–∑—ã–≤–∞: " + uniqueItems[0]);
        console.log("–í—ã–≤–æ–¥ –æ—Ü–µ–Ω–∫–∏: " + uniqueItems2[0]);
        INSERT_INTO_REVIEWS = await database.query(INSERT_INTO_REVIEWS_QUERY, [SELECT_CLIENT.rows[0].id, uniqueItems[0], now, uniqueItems2[0]]);
        if(uniqueItems2[0] >= 8 &&uniqueItems2[0] <= 10) {
            await bot.sendDocument(id, "img/otzyv.gif" , {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: 
                        [
                            [{text: "üìü –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞` }]
                        ]
                },
                caption: `<strong>–í—ã –≤–≤–µ–ª–∏ –æ—Ç–∑—ã–≤</strong> \n\n"<i>${uniqueItems[0]}</i>" \n\n <strong>–∏ –æ—Ü–µ–Ω–∫—É</strong> "<i>${uniqueItems2[0]}</i>". \n\n–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—Å —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ! –±–ª–∞–≥–æ–¥–∞—Ä—è –í–∞–º –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ!`
            });
        }
        else if(uniqueItems2[0] <= 7 && uniqueItems2[0] >= 5){
            await bot.sendDocument(id, "img/otzyv.gif" , {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: 
                        [
                            [{text: "üìü –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞` }]
                        ]
                },
                caption: `<strong>–í—ã –≤–≤–µ–ª–∏ –æ—Ç–∑—ã–≤</strong> \n\n"<i>${uniqueItems[0]}</i>" \n\n <strong>–∏ –æ—Ü–µ–Ω–∫—É</strong> "<i>${uniqueItems2[0]}</i>". \n\n–ü–æ –æ—Ü–µ–Ω–∫–µ –≤–∏–¥–Ω–æ, —á—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –ª—É—á—à–µ –¥–ª—è –í–∞—Å —Å—Ç–∞—Ä–∞—Ç—å—Å—è! –í—Å–µ –±—É–¥–µ—Ç! –ë–ª–∞–≥–æ–¥–∞—Ä—è –í–∞–º –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ!`
            });
        }
        else if(uniqueItems2[0] <= 4 && uniqueItems2[0] >= 1){
            await bot.sendDocument(id, "img/otzyv.gif" , {
                parse_mode: "HTML",
                caption: `<strong>–í—ã –≤–≤–µ–ª–∏ –æ—Ç–∑—ã–≤</strong> \n\n"<i>${uniqueItems[0]}</i>" \n\n <strong>–∏ –æ—Ü–µ–Ω–∫—É</strong> "<i>${uniqueItems2[0]}</i>". \n\n–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—Å –ø–ª–æ—Ö–æ. –ú—ã –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ —Ö–æ—Ç–∏–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —á—Ç–æ –í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –°–ø–∞—Å–∏–±–æ, –±–ª–∞–≥–æ–¥–∞—Ä—è –í–∞–º –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ!`,
                reply_markup: {
                    inline_keyboard: 
                        [
                            [{text: "üìü –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞` }]
                        ]
                }
            });
        }

    }
    catch(ex) {
        console.log('Something wrong happend - ' + ex)
    }
    finally {
        await database.end()
    }
}

module.exports.give_feedback = give_feedback;