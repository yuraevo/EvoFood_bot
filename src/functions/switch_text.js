const DB = require("../connect_db");
const Client  = require('pg');
const registration = require("./userRegistration");
const keyboard_text = require("../keyboard_text");
const keyboards = require("../keyboard");
const text = require("../text");
const personal_card_user = require("./personal_card_user")

async function switch_text(id, data, first_name, last_name, username, bot, query)
{
    try {
        //bot.deleteMessage(id, query.message.message_id);
        switch(data) {
            case '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
                console.log("–ó–∞—à–ª–æ –≤ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
                TEXT = `
<strong>${first_name}, –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã? </strong>`
                bot.sendMessage(id, TEXT, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: 
                            [
                                [{text: "üò≠ –î–∞", callback_data: `–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É` }],
                                [{text: "üîô –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data: `–ö–æ—Ä–∑–∏–Ω–∞`}]
                            ]
                    }
                });
            break;

            case `–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É`:
                var DELETE_BASKET_USER_QUERY = `DELETE FROM "Order_Dish"
                WHERE "Order_Dish".client = (SELECT "Client".id FROM "Client" 
                                            JOIN "User" ON "User".id = "Client".user
                                            WHERE "User".username = ($1))`;  // —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                DELETE_BASKET_USER = await database.query(DELETE_BASKET_USER_QUERY, [username]); //–∑–∞–ø—Ä–æ—Å –∫–æ—Ä–∑–∏–Ω—ã —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ 
                TEXT = `<strong>${first_name}, –º—ã –ø–æ—á–∏—Å—Ç–∏–ª–∏ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, —Ç–µ–ø–µ—Ä—å —Ç–∞–º –ø—É—Å—Ç–æ </strong> 
            
–£ –Ω–∞—Å –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –≤–∫—É—Å–Ω—ã—Ö –±–ª—é–¥ üçù 
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—éüëá`
                await bot.sendDocument(id, "img/basket2.gif", {
                        parse_mode: "HTML",
                        caption: TEXT,
                })
                
            break;

            case '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω?':
                console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
                TEXT = `
<strong>${first_name}, –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω? </strong>`
                await bot.sendMessage(id, TEXT, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: 
                            [
                                [{text: "üì≤ –î–∞", callback_data: `–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω` }],
                                [{text: "üîô –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data: `–ù–∞–∑–∞–¥ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç`}]
                            ]
                    }
                });
            break;

            case '–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω': 
                await bot.deleteMessage(id, query.message.message_id);
                let array = new Array(); // –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
                let uniqueItems = new Array(); //–º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                async function inputNewPhone(array, uniqueItems, username) {
                    try {
                       return await new Promise(async function(resolve) {
                           bot.sendMessage(id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", {});
                           bot.on("message", msg => {
                                    if(uniqueItems.length < 1) {
                                        adress = msg.text;
                                        array.push(adress);
                                        uniqueItems = Array.from(new Set(array));
                                        console.log("–í–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä: " + uniqueItems);
                                        insert_new_phone_into_user(array, uniqueItems, username);
                                    }
                            });
                            resolve();
                        });
                    }
                    catch(ex) {
                        console.log('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ - ' + ex);
                    }
                    finally { 
                       
                    }
                }

                async function insert_new_phone_into_user(array, uniqueItems, username) {
                    try {
                        database = new Client.Pool(DB);
                        await database.connect().then(console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"));;
                        var INSERT_NEW_PHONE_QUERY = `UPDATE "User"
                        SET phone = ($1)
                        WHERE username = ($2)`; // –§—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å–∞–º–æ–π –±–∞–∑–µ –≤ user
                        console.log("–í—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞: " + uniqueItems[0])
                        await database.query(INSERT_NEW_PHONE_QUERY, [uniqueItems[0], username]); //–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                        await bot.sendMessage(id, `–í–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä <i>${uniqueItems[0]}</i> —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ!`, {
                            parse_mode: "HTML",
                            // reply_markup: {
                            //     inline_keyboard: 
                            //         [
                            //             [{text: "–ó–∞–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data: `–ö–æ—Ä–∑–∏–Ω–∞` }],
                            //             [{text: "üîô –ù–∞–∑–∞–¥ ", callback_data: `–ö–æ—Ä–∑–∏–Ω–∞`}]
                            //         ]
                            // }
                        })
                    }
                    catch(ex) {
                        console.log('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ- ' + ex);
                    }
                    finally {
                        await database.end()
                    }
                }
                await inputNewPhone(array, uniqueItems, username);
            break;
        }
    }
    catch(ex) {
        console.log('Something wrong happend - ' + ex)
    }

    finally {

    }
}

module.exports.switch_text = switch_text;