const DB = require("../connect_db");
const Client  = require('pg');
const registration = require("./userRegistration");
const keyboard_text = require("../keyboard_text");
const keyboards = require("../keyboard");
const text = require("../text");
const choice_dish = require("./choiseDish")

async function inline_keyboard_add_to_card(id, data, username, bot, query) {
    try {
        database = new Client.Pool(DB);
        var queryUser = `SELECT 
                        name_dish, public."Category_Dish".name 
                        FROM public."Dish" 
                        JOIN public."Category_Dish" ON 
                        public."Category_Dish".id = public."Dish".category`;
        dish = await database.query(queryUser);
        if(dish.rows[0] != null) { 
            for (const element of dish.rows) {
                switch(data) {
                    case `–ö: ` + element.name_dish:
                        bot.answerCallbackQuery(query.id, "–í–∞—à –∑–∞–∫–∞–∑ " + element.name_dish + " –≤ –∫–æ—Ä–∑–∏–Ω–µ");
                        let array = new Array(); // –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
                        let uniqueItems = new Array(); //–º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        async function add_to_card(array, uniqueItems) {
                            try {
                                return await new Promise(async function (resolve) {
                                    console.log("–ó–∞—à–ª–æ –≤ –∞–¥–¥ —Ç–æ –∫–∞—Ä–¥")
                                    var DISH_QUERY = `SELECT id, name_dish
                                                    FROM public."Dish" WHERE name_dish = ($1)`;
                                    var CLIENT_ID_QUERY = `SELECT public."Client".id
                                                    FROM public."Client" JOIN public."User"
                                                    ON public."Client".user = public."User".id
                                                    WHERE public."User".username = ($1)`;

                                    SELECTED_DISH = await database.query(DISH_QUERY, [element.name_dish]); // –∞–π–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
                                    SELECTED_CLIENT = await database.query(CLIENT_ID_QUERY, [username]); // –∞–π–¥–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞

                                    if(SELECTED_DISH.rows[0] != null) { 
                                        if(SELECTED_CLIENT.rows[0] != null)  {
                                            async function inputQuantity(array, uniqueItems, clientID) {
                                                try {
                                                   return await new Promise(async function(resolve) {
                                                       bot.sendMessage(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", {});
                                                       bot.on("message", msg => {
                                                                if(uniqueItems.length < 1) {
                                                                    adress = msg.text;
                                                                    array.push(adress);
                                                                    uniqueItems = Array.from(new Set(array));
                                                                    console.log("–í–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: " + uniqueItems);
                                                                    insert_into_order_dish(array, uniqueItems, clientID); // –≤—ã–∑–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞
                                                                }
                                                        });
                                                        resolve();
                                                    });
                                                }
                                                catch(ex) {
                                                    console.log('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ - ' + ex);
                                                }
                                                finally { 
                                                   
                                                }
                                            }

                                            async function insert_into_order_dish(array, uniqueItems, clientID) {
                                                try {
                                                    database = new Client.Pool(DB);
                                                    await database.connect().then(console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"));;
                                                    var INSERT_INTO_ORDER_DISH_QUERY = `SELECT * 
                                                                                FROM insert_into_order_dish($1, $2, $3)`; // –§—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å–∞–º–æ–π –±–∞–∑–µ –≤ order_dish
                                                    console.log("–í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: " + uniqueItems[0])
                                                    console.log("–í—ã–≤–æ–¥ –∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞: " + clientID)
                                                    await database.query(INSERT_INTO_ORDER_DISH_QUERY, [SELECTED_DISH.rows[0].id, uniqueItems[0], clientID]); //–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                                                    await bot.sendMessage(id, `–í–∞—à –∑–∞–∫–∞–∑ <i>${SELECTED_DISH.rows[0].name_dish}(x${uniqueItems[0]})</i> –≤ –∫–æ—Ä–∑–∏–Ω–µ!`, {
                                                        parse_mode: "HTML",
                                                        // reply_markup: {
                                                        //     inline_keyboard: 
                                                        //         [
                                                        //             [{text: "–ó–∞–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data: `–ö–æ—Ä–∑–∏–Ω–∞` }],
                                                        //             [{text: "üîô –ù–∞–∑–∞–¥ ", callback_data: `–ö–æ—Ä–∑–∏–Ω–∞`}]
                                                        //         ]
                                                        // }
                                                    })
                                                }
                                                catch(ex) {
                                                    console.log('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ- ' + ex);
                                                    await bot.sendMessage(id, "–ü–æ—Ö–æ–¥—É –≤—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑üßê")
                                                }
                                                finally {
                                                    await database.end()
                                                }
                                            }
                                            await inputQuantity(array, uniqueItems, SELECTED_CLIENT.rows[0].id); //–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ 
                                    }
                                    resolve()
                                }
                                }) 
                            }
                            catch(ex) {
                                console.log('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ- ' + ex);
                            }
                            finally {

                            }
                            
                        }
                        await add_to_card(array, uniqueItems)
                    break;

                    case `–ù: ` + element.name_dish:
                        console.log("–ó–∞—à–ª–æ –≤ –Ω–µ—Ç")
                        console.log(element.name)
                        choice_dish.choiseDish(bot, id, query.message.chat.first_name, username, element.name);
                    break;
                    
                }
            }
        }
    }
    catch(ex) {
        console.log('Something wrong happend - ' + ex);
    }
    finally {
        //await database.end()
        console.log("DB disconnect");
    }
}

module.exports.inline_keyboard_add_to_card = inline_keyboard_add_to_card;
